// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MAGMA_ARM_MALI_TYPES_H_
#define MAGMA_ARM_MALI_TYPES_H_

#include <cstdint>

#include "magma_common_defs.h"

// These flags can be specified to magma_map_buffer_gpu.
enum MagmaArmMaliGpuMapFlags {
    // Accesses to this data should be GPU-L2 coherent.
    kMagmaArmMaliGpuMapFlagInnerShareable = (1 << MAGMA_GPU_MAP_FLAG_VENDOR_SHIFT),
};

enum AtomFlags {
    kAtomFlagRequireFragmentShader = (1 << 0),

    // Compute shaders also include vertex and geometry shaders.
    kAtomFlagRequireComputeShader = (1 << 1),
    kAtomFlagRequireTiler = (1 << 2),
};

enum ArmMaliResultCodeFlags {
    // The result code is for a software event, not one created by hardware.
    kArmMaliSoftwareEvent = (1u << 14),

    // A software event succeeded.
    kArmMaliSoftwareEventSuccess = (1u << 13),

    // This event is not related to a specific GPU job.
    kArmMaliSoftwareEventMisc = (1u << 12),
};

enum ArmMaliResultCode {
    // These codes match the result codes from hardware.
    kArmMaliResultSuccess = 1,

    // This result code is only generated by the driver itself.
    kArmMaliResultTerminated =
        kArmMaliSoftwareEvent | kArmMaliSoftwareEventSuccess | kArmMaliSoftwareEventMisc,
};

// This is arbitrary user data that's used to identify an atom.
struct magma_arm_mali_user_data {
    uint64_t data[2];
} __attribute__((packed));

struct magma_arm_mali_atom {
    uint64_t job_chain_addr;
    struct magma_arm_mali_user_data data;
    uint32_t flags; // a set of AtomFlags.
    uint8_t atom_number;

    // The atom numbers of the atoms this depends on. 0 means no dependency.
    uint8_t dependencies[2];
} __attribute__((packed));

struct magma_arm_mali_status {
    uint32_t result_code;
    uint8_t atom_number;
    magma_arm_mali_user_data data;
} __attribute__((packed));

#endif
