# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

group("services") {
  public_deps = [
    "//garnet/bin/media/audio_policy_service",
    "//garnet/bin/media/flog_service",
    "//garnet/bin/media/media_service",
    "//garnet/bin/media/net_media_service",
  ]
}

group("tools") {
  public_deps = [
    "//garnet/bin/flog_viewer",
    "//garnet/bin/media/vol",
  ]
}

package("audio_server") {
  deps = [
    "//garnet/bin/media/audio_server",
  ]

  binary = "audio_server"

  meta = [ {
        path = rebase_path("audio_server/meta/sandbox")
        dest = "sandbox"
      } ]
}

package("tts_service") {
  app = true

  deps = [
    "//garnet/bin/media/tts_service",
  ]

  binary = "tts_service"
}

package("media_client") {
  system_image = true

  deps = [
    "//garnet/public/lib/media/c",
  ]

  libraries = [ {
        name = "libmedia_client.so"
      } ]
}

package("tests") {
  testonly = true
  system_image = true

  package_name = "media_tests"

  deps = [
    "//garnet/bin/media/audio:tests",
    "//garnet/bin/media/demux:tests",
    "//garnet/bin/media/media_service:tests",
    "//garnet/bin/media/net_media_service:tests",
    "//garnet/bin/media/util:tests",
    "//garnet/public/lib/media/c:tests",
    "//garnet/public/lib/media/timeline:tests",
    "//garnet/public/lib/media/transport:tests",
  ]

  tests = [
    {
      name = "media_audio_tests"
    },

    {
      name = "media_client_tests"
    },

    {
      name = "media_demux_tests"
    },

    {
      name = "media_lib_timeline_tests"
    },

    {
      name = "media_lib_transport_tests"
    },

    {
      name = "media_service_tests"
    },

    {
      name = "media_util_tests"
    },

    {
      name = "net_media_service_tests"
    },
  ]
}

# This package adds an empty file at path that audio_server tests to decide
# whether the mixer should own all of the audio inputs in the system, or if they
# should be left alone to be picked up by the media service.
#
# If this package is included, the audio capturer interface provided by the
# mixer will be functional. If it is left out, the (legacy) audio input paths
# provided by the media service will be functional.
package("media_mixer_audio_input_config") {
  system_image = true
  resources = [
    {
        path = rebase_path("data/mixer_owns_audio_input")
        dest = "media/mixer_owns_audio_input"
    }
  ]
}
