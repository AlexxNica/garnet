{#--- Begin #}

{%- import "encoding_macros.tmpl" as encoding_macros %}
{%- macro enum_def(union) %}
enum {{union|name}}Tag {
{%-   for field in union.fields %}
  {{field|name}},
{%-   endfor %}
  unknown
}
{%- endmacro %}

{%- macro wrapper_def(union) %}
class {{union|name}} extends bindings.Union {
  static final _tagToInt = const {
{%-   for field in union.fields %}
    {{union|name}}Tag.{{field|name}}: {{field.ordinal}},
{%-   endfor %}
  };

  static final _intToTag = const {
{%-   for field in union.fields %}
    {{field.ordinal}}: {{union|name}}Tag.{{field|name}},
{%-   endfor %}
  };

  final _data;
  final {{union|name}}Tag tag;

{%-   for field in union.fields %}
  const {{union|name}}.with{{field|name|upper_camel}}({{field.kind|dart_type}} {{field|name}}) :
    tag = {{union|name}}Tag.{{field|name}},
    _data = {{field|name}};

  {{field.kind|dart_type}} get {{field|name}} {
    if (tag != {{union|name}}Tag.{{field|name}}) {
      throw new bindings.UnsetUnionTagError(tag, {{union|name}}Tag.{{field|name}});
    }
    return _data;
  }

{%-   endfor %}

  static {{union|name}} decode(bindings.Decoder decoder0, int offset) {
    int size = decoder0.decodeUint32(offset);
    if (size == 0) {
      return null;
    }
    {# Unknown union members not handled. #}
    {{union|name}}Tag tag = _intToTag[decoder0.decodeUint32(offset + 4)];
    switch (tag) {
{%-   for field in union.fields %}
      case {{union|name}}Tag.{{field|name}}:
{%-     if field.kind|is_union_kind %}
        var decoder1 = decoder0.decodePointer(offset + 8, {{field.kind|is_nullable_kind|dart_true_false}});
        return new {{union|name}}.with{{field|name|upper_camel}}({{field.kind|dart_type}}.decode(decoder1, 0));
{%-     else %}
        {{field.kind|dart_type}} {{field|name}};
        {{encoding_macros.decode(field|name, field.kind, "offset + 8", 0)|indent(8)}}
        return new {{union|name}}.with{{field|name|upper_camel}}({{field|name}});
{%-     endif %}
        break;
{%-   endfor %}
      default:
        throw new bindings.FidlCodecError("Bad union tag: $tag");
    }
  }

  void encode(bindings.Encoder encoder_0, int offset) {
    encoder_0.encodeUint32(16, offset);
    encoder_0.encodeUint32(_tagToInt[tag], offset + 4);
    switch (tag) {
{%-   for field in union.fields %}
      case {{union|name}}Tag.{{field|name}}:
{%-     if field.kind|is_union_kind %}
        encoder_0.encodeNestedUnion({{field|name}}, offset + 8, {{field.kind|is_nullable_kind|dart_true_false}});
{%-     else %}
        {{encoding_macros.encode(field|name, field.kind, "offset + 8", 0)|indent(8)}}
{%-     endif %}
        break;
{%-   endfor %}
      default:
        throw new bindings.FidlCodecError("Bad union tag: $tag");
    }
  }

  String toString() {
    String result = "{{union|name}}(";
    switch (tag) {
{%-   for field in union.fields %}
      case {{union|name}}Tag.{{field|name}}:
        result += "{{field|name}}";
        break;
{%-   endfor %}
      default:
        result += "unknown";
    }
    result += ": $_data)";
    return result;
  }
}
{%- endmacro %}


{%- macro union_def(union, typepkg, package) %}
{{enum_def(union)}}
{{wrapper_def(union)}}

{%- endmacro %}
