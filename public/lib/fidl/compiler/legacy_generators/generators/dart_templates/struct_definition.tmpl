{#--- Begin #}
{%- import "encoding_macros.tmpl" as encoding_macros %}
{%- macro struct_def(struct, typepkg, package) %}
{#--- Enums #}
{%- from "enum_definition.tmpl" import enum_def %}
{%-  for enum in struct.enums %}
{{enum_def(enum, typepkg, package)}}
{%-  endfor %}

class {{struct|name}} extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
{%- for version in struct.versions %}
    const bindings.StructDataHeader({{version.num_bytes}}, {{version.version}}){% if not loop.last %},{% endif %}
{%- endfor %}
  ];

{#--- Constants #}
{%-  for constant in struct.constants %}
  static const {{constant.kind|dart_type}} {{constant|name}} = {{constant.resolved_value}};
{%-  endfor %}

{#--- initDefaults() #}
{%- for packed_field in struct.packed.packed_fields %}
  {{packed_field.field.kind|dart_type}} {{packed_field.field|name}} = {{packed_field.field|default_value}};
{%- endfor %}

  {{struct|name}}({%- if struct.packed.packed_fields %}{
{%- for packed_field in struct.packed.packed_fields %}
{%- if not packed_field.field.default and not packed_field.field.kind|is_nullable_kind %}
    @required
{%- endif %}
    this.{{packed_field.field|name}}{% if not loop.last %}, {% endif %}
{%- endfor %}
  }{%- endif %}) : super(kVersions.last.size) {
{%- for packed_field in struct.packed.packed_fields %}
{%- if packed_field.field.default %}
    if (this.{{packed_field.field|name}} == null) {
      this.{{packed_field.field|name}} = {{packed_field.field|default_value}};
    }
{%- endif %}
{%- if not packed_field.field.kind|is_nullable_kind %}
    assert(this.{{packed_field.field|name}} != null);
{%- endif %}
{%- endfor %}
  }

  static {{struct|name}} deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static {{struct|name}} decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }

{%- if struct.bytes %}
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
{%- else %}
    bindings.Struct.checkVersion(decoder0, kVersions);
{%- endif %}
{%- for byte in struct.bytes %}
{%-   for packed_field in byte.packed_fields %}
    {{packed_field.field.kind|dart_type}} field{{packed_field.field|name|upper_camel}};
    if (mainDataHeader.version >= {{packed_field.min_version}}) {
      {{encoding_macros.decode('field' ~ packed_field.field|name|upper_camel, packed_field.field.kind, 8+packed_field.offset, packed_field.bit)|indent(6)}}
    }
{%-   endfor %}
{%- endfor %}

    return new {{struct|name}}(
{%- for byte in struct.bytes %}
{%-   for packed_field in byte.packed_fields %}
    {{packed_field.field|name}}: field{{packed_field.field|name|upper_camel}},
{%-   endfor %}
{%- endfor %}
    );
  }

  void encode(bindings.Encoder encoder_) {
{%- if not struct.bytes %}
    encoder_.getStructEncoderAtOffset(kVersions.last);
{%- else %}
    var encoder_0 = encoder_.getStructEncoderAtOffset(kVersions.last);
{%- endif %}
    const String structName = "{{struct|name}}";
    String fieldName;
    try {
{%- for byte in struct.bytes %}
{%-   for packed_field in byte.packed_fields %}
      fieldName = "{{packed_field.field|name}}";
      {{encoding_macros.encode(packed_field.field|name, packed_field.field.kind, 8+packed_field.offset, packed_field.bit)|indent(6)}}
{%-   endfor %}
{%- endfor %}
    } on bindings.FidlCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "{{struct|name}}("
{%- for packed_field in struct.packed.packed_fields %}
           "{{packed_field.field|name}}: ${{packed_field.field|name}}" {% if not loop.last %}", "{% endif %}
{%- endfor %}")";
  }

  Map toJson() {
    {%- if struct|is_cloneable_kind %}
    Map map = new Map();
    {%- for packed_field in struct.packed.packed_fields %}
    map["{{packed_field.field|name}}"] = {{packed_field.field|name}};
    {%- endfor %}
    return map;
    {%- else %}
    throw new bindings.FidlCodecError(
        'Object containing handles cannot be encoded to JSON.');
    {%- endif %}
  }
}

{%- endmacro %}
