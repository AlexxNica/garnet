// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module tracing;

// The provider interface which applications must implement and register
// with the |TraceRegistry| to participate in tracing.
//
// See //zircon/system/ulib/trace-provider/ for a C++ implementation of
// this interface which can easily be configured by an application.
[ServiceName="tracing::TraceProvider"]
interface TraceProvider {
  // Starts writing trace records for events in the specified |categories|
  // into |buffer| using |fence| for signaling.
  //
  // When the trace provider fills the buffer completely, it must stop tracing
  // and close both |buffer| and |fence| to indicate to the trace manager
  // that tracing is finished.
  //
  // When the trace provider observes |ZX_EPAIR_CLOSED| on |fence|, it must
  // assume the trace manager has terminated abnormally (since |Stop| was
  // not received as usual) and stop tracing automatically.
  //
  // At most one trace can be running at a time.  If the trace provider
  // receives a request to start tracing while already tracing, it must
  // ignore the request.
  //
  // There is no result. If the provider successfully starts it must call
  // zx_object_signal_peer() on |fence| passing TRACE_PROVIDER_SIGNAL_STARTED.
  // #include <trace-provider/provider.h> to get TRACE_PROVIDER_SIGNAL_STARTED.
  // To indicate failure to start close |fence|.
  //
  // If the provider drops a record because its buffer is full it must call
  // zx_object_signal_peer() on |fence| passing
  // TRACE_PROVIDER_SIGNAL_BUFFER_OVERFLOW.
  //
  // TODO(jeffbrown): Implement half-full signal and streaming protocol.
  Start@0(handle<vmo> buffer, handle<eventpair> fence, array<string> categories);

  // Stops tracing.
  //
  // Once the provider has finished writing any final events to the trace
  // buffer, it must close both |buffer| and |fence| to indicate to the trace
  // manager that tracing is finished.
  Stop@1();

  // Dumps the internal state of the trace provider to |output| in a
  // human-readable form.
  Dump@2(handle<socket> output);
};
