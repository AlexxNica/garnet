// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cobalt;

// This is not the service that should be used by Cobalt clients. This
// service is primarily useful for tests of Cobalt.

[ServiceName="cobalt::CobaltController"]
interface CobaltController {
  // Requests that the collection of Observations that are currently cached
  // locally be sent to the Cobalt server soon. Cobalt will send the
  // Observations in one or more batches and will retry several times upon
  // failure. The response occurs only after that procedure is completed. A
  // return value of true indicates that all Observations were successfully
  // sent. A return value of false indicates otherwise.
  RequestSendSoon@0() => (bool success);

  // The Cobalt FIDL service will block, not processing any further FIDL
  // requests or responses, on either this interface or the CobaltEncoder
  // interface, until either |max_wait_seconds| have elapsed or the Cobalt
  // service's worker thread has successfully sent all previously added
  // Observations to the Shuffler. The response will be returned after the
  // blocking period has ended. Note that this method does not request
  // an expedited send and so it is possible that the worker thread is
  // currently waiting for the next scheduled send time and so the empty
  // state will not be achieved prior that time.
  BlockUntilEmpty@1(uint32 max_wait_seconds) => ();

  // These diagnostic stats are mostly useful in a testing environment but
  // may possibly prove useful in production also.
  NumSendAttempts@2() => (uint32 num);
  FailedSendAttempts@3() => (uint32 num);
};
